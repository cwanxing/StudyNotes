面向对象：不了解原理的情况下，会使用功能
对象：黑盒子，不了解内部结构，知道表面的各种操作(按钮)
使用对象时，只关注对象提供的功能，不关注其内部细节
(各司其职)

例子：
电视

按钮(遥控器)
每个按钮我都知道是干啥的
但我不知道它是怎么做到
按某个按钮就能换台(怎么做到)

Data对象

getFullYear获取年份

但你知道它是怎么知道它是怎么获取的呢
这就是面向对象(其实就是是编程变的简单了)


JS 中的面向对象3大特点
1, 抽象：抓出跟 问题相关 的特征抽出来(抽对象)
2，封装：看不到里面的东西，用好表面的功能就好了
3，继承：从父类上继承出一下方法和属性，子类又有一些自己的代码
(最大限度的重用我们已有的代码)
    多重继承：(少用)
        盒子：能装东西
        汽车：有轮子，会跑
        集装箱货车：能装东西，又会跑，还有轮子
    多态：对于JS这类弱语言作用不大

面向对象分为：
1，用对象的(看不见对象)
2，写对象的

对象的组成：
1，方法
2，属性


看过原型(文件)就知道这在讲什么
(其实不需要分太清，可以混着用的)
        类： 模子(印钞模板)
      对象： 产品(成品)
        
    var arr = new Array(1,2,3);
    
    Array 类
    arr   对象

    Array.push() 错误，类没有实际功能，就是模子
    arr.push();  正确，
    new arr();   错误，不能在把它当为类去生产东西

总结：
1. 什么是面向对象：
    只关注对象功能，不关注内部原理

2. js中的面向对象
    抽象：抓住问题核心
    封装：用好功能，不考虑内部实现
    继承：从已有对象上，继承新对象
        多重继承
        多态
    方法---->函数：过程、动态的
    属性---->变量：状态、静态的

3. this：当前的方法属性谁，就表示谁
    不能在系统对象上添加东西，会出错

4. 工厂方式：用一个函数包装功能
    问题1. 没有new
    解决：用this
    问题2. 函数重复定义
    解决：原型----->prototype



实例：面向对象的选项卡
把面向过程的程序，改写成面向对象的形式
1， 原则： 
        不能有函数套函数，但可以有全局变量
2， 过程：
        onload   -->   构造函数
        全局变量  -->   属性
        函数      -->   方法
3， 改错：
        this、事件、闭包()、传参
对象与闭包
    通过闭包传递this
