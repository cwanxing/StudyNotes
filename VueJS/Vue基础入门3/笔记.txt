/*****/
    阅读指南：
        1. 包管理工具：通过命名行工具下载包
        2. vue：动画
        3. 组件
        4. 路由
        5. vue-loader webpack
/*****/

git page：
	任何仓库 master分支，都可以发布(git page)
-------------------------------------
双向过滤器:
	Vue.filter(name,{
		read:function(input){},
		write:function(val){}
	});
-------------------------------------
1.0
2.0
-------------------------------------
引入 vue.js
-------------------------------------
npm -> （后台）包管理器

以下是通过 GitHub 把vue文件 下载到本地了
bower -> （前端）包管理器
	    安装：npm install bower -g
		验证: bower --version
bower install <包名>【安装指定vue版本】bower install vue#1.0.28
bower uninstall <包名> 卸载
bower info <包名>	查看包版本信息

<script src="bower_components/vue/dist/vue.js"></script>
-------------------------------------
vue-> 过渡(动画)
	本质走的css3: transtion, animation
	【引他人写的动画库：animation.css】
        html:
            input[button] @click="toggle"
	        <div id="div1" v-show="bSign" transition="fade"></div>
            【引用他人库用法：div#div1 v-show="bSign" class="animated" transition="bounce"】
        js:
            data:{ bSign: true},
            methods:{
                toggle:function(){
                    this.bSign!=this.bSign;
                }
            },
            【transition:{ // 定义 所有动画
                bounce:{
                    enterClass:'zoomInLeft',
                    leaveClass:'zoomOutRight' // => animation.css 库中的类名
                }

            }】

        style: // 没有用动画库，就不用写了
            定义动画:
            .fade-transition{
                width:100px;height:100px;background:red; // 元素基础样式
            }
            进入：
            .fade-enter{
                opacity: 0;
            }
            离开：
            .fade-leave{
                opacity: 0;
                transform: translateX(200px);
            }
	----------------------------------------
vue组件:
	组件: 一个大对象
定义一个组件:
1、 【全局】组件
    第一步：
        var Aaa=Vue.extend({
            template:'<h3>我是标题3</h3>'
        });
    第二步：
        Vue.component('aaa',Aaa);
    注：var vm2 = new Aaa(); // 类似 var vm = new Vue({..}) 一样的对象

	* 组件里面放数据、事件:
	js：
		var Aaa=Vue.extend({
		    data(){ // ！函数形式
		        return{ // ！返回对象
		            msg:'我是你们'
		        }
		    },
		    methods:{
		        fn:function(){
		            alert(this.msg)
		        }
		    }
            template:'<h3 @click="fn">{{msg}}</h3>'
        });
        Vue.component('aaa',Aaa);
        var vm = new Vue({
            data:{ msg:'我是他们' } // 全局组件取不到
        }).$mount('#box');

     html：
        div#box <aaa><aaa> // 我是我们【单击弹出‘我是我们’】

     注：
        1. data【必须】是函数的形式
        2. 函数【必须】返回一个对象(json)
        3. 全局组件貌似取不到new Vue({..})实例的data

2、 【局部】组件
	放到某个组件内部
js：
    var Aaa = Vue.extend({
        data(){ // ！函数形式
            return{ // ！返回对象
                msg:'我是你们'
            }
        },
        methods:{
            fn:function(){
                alert(this.msg)
            }
        }
        template:'<h3 @click="fn">{{msg}}</h3>'
    });

    var vm = new Vue({
        data:{ msg:'我是他们' },
        components:{
            'aaa':Aaa // ！要加引号哦，万一组件名为my-app，就报错了
        }
    }).$mount('#box');

 html：
    div#box <aaa><aaa> // 我是我们【单击弹出‘我是我们’】

 注：
    1. data【必须】是函数的形式
    2. 函数【必须】返回一个对象(json)
    3. 局部组件貌似也取不到new Vue({..})实例的data

--------------------------------------
另一种编写方式:【常用】具体还是看需求
    方式一、【全局】
	Vue.component('my-aaa',{
		template:'<strong>好</strong>'
	});
	var vm = new Vue(){ ... }

    方式二、【局部】
    js：
        var vm=new Vue({
            el:'#box',
            components:{
                'my-aaa':{
                    template:'<h2{{m2}}</h2>',
                    data(){
                        return{
                            m2:'你好'
                        }
                    }
                }
            }
        });
    html：
        div#box <my-aaa></my-aaa>
	注：组件里的数据时独立的
-----------------------------------
配合模板:【配合组件，形成了】模块化
	1. template:'<h2 @click="change">标题2->{{msg}}</h2>'

	2. 单独放到某个地方
		a). 了解就好
            <script type="x-template" id="aaa"> ！注意id，下面用到   type是随便写的【不写报错】
                <h2 @click="change">标题2->{{msg}}</h2>
                <ul>
                    <li>1111</li>
                    <li>2222</li>
                    <li>3333</li>
                </ul>
            </script>

		b). 常用
		    <template id="aaa"> ！注意id，下面用到
                <h1>标题1</h1>
                <ul>
                    <li v-for="val in arr">
                        {{val}}
                    </li>
                </ul>
		    </template>

		 js:
		    var vm = new Vue({
                components:{
                    'my-aaa':{
                        template:'#aaa', // template:'标签id'
                        data(){
                            return{
                                m2:'你好',
                                arr:['arr1', 'orange', 'apple']
                            }
                        }
                    }
                }
            }).$mount('#box');
-----------------------------------
3、动态组件:
    组件：<my-app></my-app>
	动态：<component :is="组件名称"></component> 【只需填写相应的组件名称】

    需求：点击组件aaa，显示组件my-aaa；点击组件bbb，显示组件my-bbb【有点像选项卡】
    html:
        input[button] @click="a='my-aaa'" value="组件aaa"
        input[button] @click="a='my-bbb'" value="组件bbb"
        <component :is="a"></component>
	js：
	    new Vue({
	        data:{
	            a:'my-aaa',
	        },
            components:{
                'my-aaa':{
                    template:'<h1>组件my-aaa</h1>'
                },
                'my-bbb':{
                    template:'<h1>组件my-bbb</h1>'
                }
            }
	    }).$mount('#box');

--------------------------------------------
vue-devtools    ->  调试工具
	https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd
--------------------------------------------
***vue默认情况下，子组件是没法访问父组件数据***
    子父组件数据不相干

组件数据传递:	√ 【组件可以嵌套】

一、子组件就想获取父组件data【涉及组件数据传递】
格式：
	在调用子组件：
		<bbb :m="数据"></bbb>

	子组件之内:
		props:['m','myMsg']

		props:{
			'm':String,
			'myMsg':Number
		}

具体例子：父组件aaa、子组件bbb
    html:
        div#box <aaa></aaa>
        // <bbb></bbb>  1. Vue warn 警告 Unknown custom element 未知元素

        获取父组件数据：
        <template id="aaa"> // 这是父组件模板
            <h3>标题：取数据【子 => 父】</h3>
            <div>父数据：{{msg}}</div>  // 显示父组件数据
        	<div>子数据：{{msg2}}</div> // 为空【取不到】貌似变成父 => 子【那也取不到】
        	// 子 => 父 取法如下：
            <bbb :m='msg'></bbb> // 这是子组件【利用属性绑定传递数据的】
        </template>

        注：模板要box盒子外哦
    js:
        new New({
            data:{},
            components:{
                'aaa':{
                    template:'<h1>{{msg}}</h1>',
                    //       '<h1>{{msg}}</h1><bbb></bbb>' 这才是正确的使用子组件方式
                    data(){
                        return{
                            msg:'我是父组件的数据'
                        }
                    },
                    components:{
                        'bbb':{
                            props:{
                                'm':
                            },
                            // 写法1、props:['m']
                            // 写法2、props:{
                                'm': String,
                                'n': Number
                            }
                            template:'<h1>我是子组件</h1>',
                            // template:'<h1>{{m}}</h1>',
                            data(){
                                return{
                                    msg2:'我是子组件的数据'
                                }
                            }
                        }
                    }
                }
            }
        }).$mount('#box');

    问题1：对于子组件是不能像父级组件那样用的，
    解决：要在父组件模板里调用才行
    代码：在 js 部分的 aaa > template:'<h1>{{msg}}</h1><bbb></bbb>'

    问题2：如何在子组件中取到父组件的数据呢？
    步骤：
        1. 子组件绑定一个属性【属性名 和 props中的要一样】
            如：
                父组件模板中：
                    子组件：<bbb :my='msg' :my-data='父组件数据名'></bbb>
                js:
                    写法一：porps：{ 'my':String, 'myData':Number } 当属性值不是指定的数据类型【报错】
                    写法二：props: ['my', 'myData']

        注：属性名 => my-data; 在props中要也驼峰命名法 => myData
           :my :my-data 必须 和 props中一致

        2. js中【子组件template】写法
            错误：template:'<h1>{{父数据名}}</h1>',
            正确：template:'<h1>{{props中定义的属性值}}</h1>',
        注：可以理解为父数据已经给你加载到props中了，不能写父数据名

二、父级获取子级数据

	***子组件把自己的数据，发送到父级***

	1. 子组件发送数据：
	    vm.$emit(事件名,数据);

	2. 父组件中的子组件接收
	    v-on:	@
    注：类似自定义事件

	具体例子：
	html:
	    div#box > <aaa></aaa>

	    <template id="aaa">
            <h1>这是父组件</h1>
            <span>本身数据：{{fatherData}}</span><br>
            <span>子数据：{{childData}}</span>
            <bbb @child_data="get"></bbb><span></span> ！！！
        </template>

        <template id="bbb">
            <h1>这是子组件</h1>
            <span>本身数据：{{childData}}</span><br>
            <span>父数据：</span><br><br>
            <input type="button" name="bt" @click="send" value="发送数据">
        </template>

	js:
	    new Vue({
	        data:{},
	        components:{
	            'aaa':{
	                data(){
                        return{
                            fatherData:'我是父数据'
                        }
                    },
                    methods:{
                        get(data){ // .2.
                             // data 就是子数据【由子组件发送而来】！！！
                        }
                    },
	                template:'#aaa',
	                components:{
	                    'bbb':{
	                        template:'#bbb',
	                        data(){
	                            return(){
	                                childData:'我是子数据'
	                            }
	                        },
	                        methods:{
	                            send:function(){
	                                this.$emit('child_data', this.childData); // .1. ！！！
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    }).$mount('#box');
    注释编号解析：
        1. $emit('事件名', 数据) 为vue本身方法：用于子组件 把自己的数据 发送出去
            参数：
                1. 在父组件中 子组件接收时，所用到的事件名
                2. 我说不清楚，看例子
        2. 在父组件中，子组件调用【$emit('事件名', 数据)】中的数据=>里面的参数就是子数据
            可以理解为，子数据在参数里

***********注：子组件必须在父组件中才能用*************

--------------------------------------------
vm.$dispatch(事件名,数据)	子级向父级发送数据
vm.$broadcast(事件名,数据)	父级向子级广播数据
	配合: event:{}

	在vue2.0里面已经，报废了
--------------------------------------------
slot:
	位置、槽口
	作用: 占个位置

    div#box
		<aaa>
			<ul slot="ul-slot">！！！
				<li>1111</li>
				<li>2222</li>
				<li>3333</li>
			</ul>
			<ol slot="ol-slot">！！！
				<li>111</li>
				<li>222</li>
				<li>333</li>
			</ol>
		</aaa>
		<hr>
		<aaa></aaa>

	<template id="aaa">
		<h1>xxxx</h1>
		<slot name="ol-slot">这是默认的情况</slot> ！！！
		<p>welcome vue</p>
		<slot name="ul-slot">这是默认的情况2</slot> ！！！
	</template>

    var vm=new Vue({
        data:{},
        components:{
            'aaa':{
                template:'#aaa'
            }
        }
    }).('#box');

	类似ng里面 transclude  （指令）
--------------------------------------------

vue -> SPA应用【单页面应用--整体是一个页面】
	vue-resouce	交互
	vue-router	路由【根据不同url地址，出现不同效果】根据你的地址，请求不同的组件

	咱上课: 0.7.13

主页	   home
新闻页  news

html:
    跳转链接：
	<a v-link="{path:'/home'}">主页</a>

	展示内容:
	<router-view></router-view>

js: 配置
	//1. 准备一个根组件
	var App=Vue.extend();

	//2. Home News组件都准备
	var Home=Vue.extend({
		template:'<h3>我是主页</h3>'
	});

	var News=Vue.extend({
		template:'<h3>我是新闻</h3>'
	});

	//3. 准备路由
	var router=new VueRouter();

	//4. 关联
	router.map({
		'home':{
			component:Home
		},
		'news':{
			component:News
		}
	});

	//5. 启动路由【让box具有路由功能】
	router.start(App,'#box');

跳转:
	router.redirect({
		'/':'/home'
	});
--------------------------------------
路由嵌套(多层路由):

	主页	home
		登录	home/login
		注册	home/reg
	新闻页	news

	subRoutes:{
		'login':{
			component:{
				template:'<strong>我是登录信息</strong>'
			}
		},
		'reg':{
			component:{
				template:'<strong>我是注册信息</strong>'
			}
		}
	}
路由其他信息:
	/detail/:id/age/:age

	{{$route.params | json}}	->  当前参数

	{{$route.path}}	->  当前路径

	{{$route.query | json}}	->  数据
--------------------------------------------

******了解就好了******
vue-loader: 和其他loader一样
	其他loader ->  css-loader、url-loader、html-loader、babel-loader.....

	后台: nodeJs	->  require  exports
	broserify  模块加载器，只能加载js【淘汰】
	webpack    模块加载器， 一切东西都是模块, 最后打包到一块了

	require('style.css');	->   css-loader、style-loader

	vue-loader基于webpack

    .css
    .js
    .html
    .php
    .....

	1. vue文件: a.vue【放置的是vue组件代码】
		<template>
			html
		</template>

		<style>
			css
		</style>

		<script>
			js	（平时代码、ES6）	babel-loader
		</script>
    2. vue-loader：就是一个工具，你就理解为模块化编程必须要用到的
    3. webpack：打包工具，把所以模块打包到一块，类似于组织者

*******
    1. 怎么读懂vue文件【放组件的】=>用到vue-loader/css-loader...等等
    2. vue-loader则需要 webpack 来编译成浏览器能懂的代码
******
-------------------------------------
简单的目录结构:
	|-index.html
	|-main.js	入口文件
	|-App.vue	vue文件，官方推荐命名法
	|-package.json	工程文件(项目依赖、名称、配置)
		npm init --yes 生成
 	|-webpack.config.js	webpack配置文件

ES6: 模块化开发
	导出模块：
		export default {}
	引入模块:
		import 模块名 from 地址
--------------------------------------------
webpak准备工作:【手动】
	cnpm install webpack --save-dev
	cnpm install webpack-dev-server --save-dev

	App.vue	-> 变成正常代码		vue-loader@8.5.4
	cnpm install vue-loader@8.5.4 --save-dev

	cnpm install vue-html-loader --save-dev

    解析vue文件需要的模块
	vue-html-loader：解析template
	css-loader：解析style
	vue-style-loader：解析行内样式
	vue-hot-reload-api@1.3.2：解析script

    解析ES6 => ES5
	babel-loader
	babel-core 语法
	babel-plugin-transform-runtime 实时显示
	babel-preset-es2015
	babel-runtime

最最核心：
	





		








	


   

	



















